.body-container{
    height: 100%;
    width: 100%;
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

.fruit-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;
    padding: 20px;
    margin-top: 60px; 
}

.fruit-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 16px;
    width: 200px;
    max-width: 200px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    background-color: #ffffff;
    transition: transform 0.2s ease;
    position: relative;
}

.fruit-card img {
    width: 100%;
    height: 8rem;
    border-radius: 4px;
}

.fruit-card h2 {
    font-size: 18px;
    margin: 8px 0;
    color: #333;
}

.fruit-card p {
    font-size: 14px;
    margin: 4px 0;
    color: #666;
}

.fruit-card .Nutrition {
    color: blue;
}

.fruit-card:hover {
    transform: scale(1.05);
}


.button-group {
    display: flex;
    justify-content: space-between;
    gap: 10px; 
    margin-bottom: 5px; 
}

.add-to-cart-button {
    background-color: #F8BB5F;
    border: none;
    border-radius: 4px;
    color: #fff;
    font-size: 16px;
    padding: 10px 20px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.add-to-cart-button:hover {
    background-color: #f5a623;
    transform: scale(1.05);
}

.buy-button {
    background-color: lightblue;
    border: none;
    border-radius: 4px;
    color: #fff;
    font-size: 16px;
    padding: 10px 20px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.buy-button:hover {
    background-color: blue;
    transform: scale(1.05);
}


.fruit-container.blurry {
    filter: blur(4px);
    transition: filter 0.3s ease;
}

/* Optionally, add styles for a backdrop overlay */
.backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.2);
    z-index: 999;
    display: ${blurring ? 'block' : 'none'};
    transition: display 0.3s ease;
}


.search-bar-container{
    display: flex;
    align-items: center;
    justify-content: center;
    left: 100px;
    margin-top: 30rem;
    width: 50%;
}









import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema({
    email: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        lowercase: true,
    },
    username: {
        type: String,
        required: true,
        trim: true,
    },
    phone: {
        type: String,
        trim: true,
    },
    address: {
        type: String,
        trim: true,
    },
    city: {
        type: String,
        trim: true,
    },
    state: {
        type: String,
        trim: true,
    },
    pincode: {
        type: String,
        trim: true,
    },
    otp: {
        type: String,
        trim: true,
    },
    isVerified: {
        type: Boolean,
        default: false,
    },
    verificationToken: {
        type: String,
        trim: true,
    },
    token: {
        type: String,
        trim: true,
    },
}, { timestamps: true });

const User = mongoose.model("User", UserSchema);
export default User;






/******************** adminlogin.jsx



/* eslint-disable react/no-unescaped-entities */
import { useState } from "react";
import "../../css/adminlogin.css";

export const AdminLogin = () => {
    // State to toggle between login and sign-up forms
    const [isSignUp, setIsSignUp] = useState(false);

    // Function to toggle form
    const toggleForm = () => {
        setIsSignUp(!isSignUp);
    };

    return (
        <div className="admin-body-container">
            <div className="admin-nav-container">
                <h1>Admin Panel</h1>
            </div>

            <div className="admin-login-container">
                <h1>{isSignUp ? "Sign Up" : "Login"}</h1>
                <form className="admin-login-form">
                    <input
                        className="admin-input"
                        type="text"
                        name="username"
                        autoComplete="off"
                        placeholder={isSignUp ? "Enter New Username" : "Username"}
                    />
                    <input
                        className="admin-input"
                        type={isSignUp ? "email" : "password"}
                        name="password"
                        autoComplete="off"
                        placeholder={isSignUp ? "Email" : "Password"}
                    />

                    {isSignUp && (
                        <input
                            className="admin-input"
                            type="password"
                            name="password"
                            autoComplete="off"
                            placeholder="Confirm Password"
                        />
                    )}

                    <button type="submit" className="admin-submit-btn">
                        {isSignUp ? "Sign Up" : "Login"}
                    </button>

                    {!isSignUp && (
                        <>
                            <p><a className="admin-forgot-password" href="#">Forgot Password?</a></p>
                            <p>
                                Don't have an account?{" "}
                                <a className="admin-signup-link" href="#" onClick={toggleForm}>
                                    Sign Up
                                </a>
                            </p>
                        </>
                    )}

                    {isSignUp && (
                        <p>
                            Already have an account?{" "}
                            <a className="admin-login-link" href="#" onClick={toggleForm}>
                                Login
                            </a>
                        </p>
                    )}
                </form>
            </div>
        </div>
    );
};









/* admin_dashboard.css */

/* Container for the entire dashboard */
.dashboard-body-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    margin: 0;
    padding: 0;
}

.dashboard-nav-container {
    height: 60px;
    width: 100%;
    background-color: #677787;
    color: white;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    font-family: 'Courier New', Courier, monospace;
    font-size: 30px;
    font-weight: 400;
    cursor: none;
}

.sidebar {
    height: 100%;
    width: 300px;
    background-color: #2f4050;
}

.sidebar-list {
    height: auto;
    padding: 0;
    width: 100%;
}

.sidebar-list .sidebar-row {
    height: 60px;
    width: 100%;
    list-style: none;
    margin: 0;
    display: flex;
    flex-direction: row;
    color: grey;
    justify-content: center;
    align-items: center;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif
}

.sidebar-row:hover {
    cursor: pointer;
    background-color: #293846;
    color: white;
}

#active {
    background-color: #293846;
    color: white;
}

.sidebar-row #sidebar-icon {
    flex: 30%;
    display: grid;
    place-items: center;
}

.sidebar-row #sidebar-title {
    flex: 70%;
}

.dashboard-main-container {
    display: flex;
    flex-grow: 1; /* Take remaining space below the nav */
    width: 100%;
}


/* Main content area */
.dashboard-container {
    flex-grow: 1; /* Take the remaining space next to the sidebar */
    background-color: #f4f4f4;
    padding: 20px;
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
}

/* Styling for the cards */
.card {
    width: 300px;
    height: 200px;
    background-color: white;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    padding: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
}




{isAuthenticated ? (
                <div className="dashboard-main-container">
                    <Sidebar />
                    <div className="dashboard-container">
                        <div className="card">
                            <CodeIcon />
                        </div>
                        <div className="card">
                            <SourceIcon />
                        </div>
                        <div className="card">Card 3</div>
                        <div className="card">Card 4</div>
                    </div>
                </div>
            ) : (
                <Admin_loader />
            )}



























//    ************** admindashboard.jsx *************************//



import "../../css/admin_dashboard.css";
import Sidebar from "../../components/adminDashboard/Sidebar";
import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import axios from "axios";
import { Admin_loader } from "../../components/admin_loader";
import { Product_avail } from "../../components/admin-components/Product_avail";
import { ManageSellers } from "../../components/admin-components/ManageSellers";
import { Mailbox } from "../../components/admin-components/Mailbox";
import { OurTeam } from "../../components/admin-components/OurTeam";
import { PackageStations } from "../../components/admin-components/PackageStations";
import { Logout } from "../../components/admin-components/Logout";

const AdminDashboard = () => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [currentSection, setCurrentSection] = useState('/*admin'); // Default section

    useEffect(() => {
        const token = localStorage.getItem("adminToken");

        if (!token) {
            // Redirect to login if token is missing
            toast.error("Admin doesn't exist");
            setTimeout(() => {
                window.location.href = "/*admin";
            }, 1000);
        } else {
            // Verify the token with backend
            axios.post("/api/adminAuth", {}, {
                headers: {
                    Authorization: `Bearer ${token}`, // Include JWT token in the request headers
                },
            })
                .then((response) => {
                    if (response.data.isValid) {
                        setIsAuthenticated(true); // Allow access to the dashboard
                    } else {
                        // Redirect if token is invalid
                        toast.error("Invalid token");
                        setTimeout(() => {
                            window.location.href = "/*admin";
                        }, 1000);
                    }
                })
                .catch((error) => {
                    // Handle token verification error
                    console.error("Token verification error:", error);
                    toast.error("Session expired, please log in again");
                    setTimeout(() => {
                        window.location.href = "/*admin";
                    }, 1000);
                });
        }
    }, []);

    const handleSectionChange = (section) => {
        setCurrentSection(section);
    };

    // Render component based on current section
    const renderComponent = () => {
        switch (currentSection) {
            case 'home':
                return <AdminDashboard />;
            case 'manageSellers':
                return <ManageSellers />;
            case 'mailbox':
                return <Mailbox />;
            case 'ourTeam':
                return <OurTeam />;
            case 'packageStations':
                return <PackageStations />;
            case 'productAvail':
                return <Product_avail />;
            case 'logout':
                return <Logout />;
            default:
                return <AdminDashboard />;
        }
    };
    


    // Render the dashboard content if authenticated, otherwise show loader
    return (
        <div className="dashboard-body-container">
            <div className="dashboard-nav-container">
                Admin Dashboard
            </div>

            {/* Conditionally render content based on authentication status */}
            {isAuthenticated ? (
                <div className="dashboard-main-container">
                    <Sidebar onSectionChange={handleSectionChange} /> {/* Pass handleSectionChange to Sidebar */}
                    <div className="dashboard-container">
                        {renderComponent()} {/* Call renderComponent to display the right component */}
                    </div>
                </div>
            ) : (
                <Admin_loader /> // Show loader while authentication is being verified
            )}
        </div>
    )
};

export default AdminDashboard;


/* Container for the entire dashboard */
.dashboard-body-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    margin: 0;
    padding: 0;
}

.dashboard-nav-container {
    height: 60px;
    width: 100%;
    background-color: #677787;
    color: white;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    font-family: 'Courier New', Courier, monospace;
    font-size: 30px;
    font-weight: 400;
    cursor: none;
}

.dashboard-main-container {
    display: flex;
    flex-grow: 1;
    /* Take remaining space below the nav */
    width: 100%;
}

/* Sidebar */
.sidebar {
    width: 300px;
    background-color: #2f4050;
    display: flex;
    flex-direction: column;
}

.sidebar-list .sidebar-row {
    height: 60px;
    width: 100%;
    list-style: none;
    margin: 0;
    display: flex;
    flex-direction: row;
    color: grey;
    justify-content: center;
    align-items: center;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif
}

.sidebar-row:hover {
    cursor: pointer;
    background-color: #293846;
    color: white;
}

#active {
    background-color: #293846;
    color: white;
}

.sidebar-row #sidebar-icon {
    flex: 30%;
    display: grid;
    place-items: center;
}

.sidebar-row #sidebar-title {
    flex: 70%;
}

/* Main content area */
.dashboard-container {
    flex-grow: 1;
    /* Take the remaining space next to the sidebar */
    background-color: #f4f4f4;
    padding: 20px;
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
}

/* Styling for the cards */
.card {
    width: 300px;
    height: 200px;
    background-color: white;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    padding: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
}








/* General container for the page */
.update-procuts-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    padding: 20px;
    background-color: #f9f9f9; /* Light background for contrast */
}

/* Search bar and button */
.update-nav {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    margin-bottom: 20px; /* Space below the nav */
}

.search-bar-container {
    display: flex;
    width: 50%; /* Adjust width as needed */
    gap: 10px;
    box-sizing: border-box;
}

.search-bar-update-product {
    flex-grow: 1; /* Make the input take remaining space */
    border-radius: 10px;
    padding: 10px;
    border: 1px solid #ddd;
    outline: none;
    transition: border-color 0.3s;
}

.search-bar-update-product:focus {
    border-color: #007bff; /* Highlight on focus */
}

.search-button-update-product {
    border-radius: 10px;
    padding: 10px 15px;
    background-color: #007bff; /* Bootstrap primary color */
    color: white;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s;
}

.search-button-update-product:hover {
    background-color: #0056b3; /* Darker shade on hover */
}

/* Scrollable container for results */
.update-body {
    width: 80%; /* Width for the results section */
    max-height: 400px; /* Set a max height for the results section */
    overflow-y: auto; /* Enable vertical scrolling */
    border: 1px solid #ddd; /* Add a border */
    border-radius: 8px; /* Round corners */
    background-color: white; /* Background color for results */
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow */
}

.results-table {
    width: 100%;
    border-collapse: collapse; /* Remove gaps between cells */
    font-family: Arial, sans-serif;
}

.results-table th,
.results-table td {
    padding: 12px;
    border: 1px solid #ddd; /* Light border for table cells */
}

.results-table th {
    background-color: #f4f4f4; /* Light background for headers */
    font-weight: bold;
}

.results-table tr:nth-child(even) {
    background-color: #f9f9f9; /* Zebra striping for even rows */
}

.results-table tr:hover {
    background-color: #f1f1f1; /* Highlight row on hover */
}

/* Style for the image */
.fruit-image {
    width: 50px;
    height: 50px;
    object-fit: cover; /* Ensure the image fits within the bounds */
}

/* Message when no results are found */
.no-results-message {
    color: red;
    font-size: 18px;
    margin-top: 20px;
    text-align: center; /* Center the no results message */
}










.carousel-container {
    position: relative;
    width: 100%; /* Adjust as needed */
    overflow: hidden; /* Hide overflow for smooth transitions */
}

.carousel-image {
    display: flex;
    transition: transform 0.5s ease; /* Smooth transition for slide change */
    width: 100%; /* Ensure the container takes full width */
}

.carousel-image img {
    width: 300px; /* Fixed width */
    height: 200px; /* Fixed height */
    object-fit: cover; /* Ensure the image covers the area without distortion */
    flex-shrink: 0; /* Prevent shrinking */
}

/* Arrow styles */
.left-arrow, .right-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    z-index: 1; /* Ensure arrows are above images */
}

.left-arrow {
    left: 10px; /* Adjust as needed */
}

.right-arrow {
    right: 10px; /* Adjust as needed */
}
