****************************************************** previous navbar ********************************************************

.navbar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 60px; /* Fixed height */
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
    background-color: #F8BB5F;
    z-index: 50; /* Ensure it stays on top */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.navbar-logo img {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    box-shadow: inset 0 0 5px rgba(247, 3, 3, 0.2);
}

.navbar-text {
    text-align: center;
}

.navbar-text h1 {
    color: #ffffff;
    font-size: 1.5rem; /* Adjusted for responsiveness */
    font-weight: bold;
    margin: 0;
}

.navbar-text p {
    color: #f0f0f0;
    font-size: 0.875rem; /* Adjusted for responsiveness */
    margin: 0;
}

.dropdown {
    position: relative;
}

.dropdown-button {
    font-size: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    border: none;
    cursor: pointer;
    margin-right: 30px;
    color: chocolate;
}

.dropdown-menu {
    position: absolute;
    right: 40px;
    margin-top: 8px;
    width: 200px;
    background: #ffffff;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    z-index: 10;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.1s ease, visibility 0.1s ease;
}

.dropdown-menu ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.dropdown-menu li {
    border-bottom: 1px solid #dddddd;
}

.dropdown-menu li:last-child {
    border-bottom: none;
}

.dropdown-menu a {
    display: block;
    padding: 12px 16px;
    color: #333333;
    text-decoration: none;
}

.dropdown-menu a:hover {
    background-color: #f0f0f0;
}

.dropdown:hover .dropdown-menu {
    opacity: 1;
    visibility: visible;
}














import { useEffect } from "react";
import axios from "axios";

export default function ShowCart() {
  const parseJwt = (token) => {
    try {
      return JSON.parse(atob(token.split('.')[1]));
    } catch (e) {
      console.error("Error parsing JWT", e);
      return null;
    }
  };

  useEffect(() => {
    const fetchCartData = async () => {
      const token = localStorage.getItem("authToken");
      if (!token) {
        console.error("No token found");
        return;
      }

      const payload = parseJwt(token);
      if (!payload || !payload.userId) {
        console.error("Invalid token payload");
        return;
      }

      const userId = payload.userId;

      try {
        const response = await axios.get(`/api/showcart?userId=${userId}`,
          { userId },  // Send the userId in the request body and also send through the headers
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        console.log(response.data);
      } catch (error) {
        console.error("Error fetching cart data", error);
      }
    };

    fetchCartData();
  }, []);

  return (
    <>
    
    </>
  )
}
