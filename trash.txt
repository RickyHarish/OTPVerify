.body-container{
    height: 100%;
    width: 100%;
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

.fruit-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;
    padding: 20px;
    margin-top: 60px; 
}

.fruit-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 16px;
    width: 200px;
    max-width: 200px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    background-color: #ffffff;
    transition: transform 0.2s ease;
    position: relative;
}

.fruit-card img {
    width: 100%;
    height: 8rem;
    border-radius: 4px;
}

.fruit-card h2 {
    font-size: 18px;
    margin: 8px 0;
    color: #333;
}

.fruit-card p {
    font-size: 14px;
    margin: 4px 0;
    color: #666;
}

.fruit-card .Nutrition {
    color: blue;
}

.fruit-card:hover {
    transform: scale(1.05);
}


.button-group {
    display: flex;
    justify-content: space-between;
    gap: 10px; 
    margin-bottom: 5px; 
}

.add-to-cart-button {
    background-color: #F8BB5F;
    border: none;
    border-radius: 4px;
    color: #fff;
    font-size: 16px;
    padding: 10px 20px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.add-to-cart-button:hover {
    background-color: #f5a623;
    transform: scale(1.05);
}

.buy-button {
    background-color: lightblue;
    border: none;
    border-radius: 4px;
    color: #fff;
    font-size: 16px;
    padding: 10px 20px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.buy-button:hover {
    background-color: blue;
    transform: scale(1.05);
}


.fruit-container.blurry {
    filter: blur(4px);
    transition: filter 0.3s ease;
}

/* Optionally, add styles for a backdrop overlay */
.backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.2);
    z-index: 999;
    display: ${blurring ? 'block' : 'none'};
    transition: display 0.3s ease;
}


.search-bar-container{
    display: flex;
    align-items: center;
    justify-content: center;
    left: 100px;
    margin-top: 30rem;
    width: 50%;
}









import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema({
    email: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        lowercase: true,
    },
    username: {
        type: String,
        required: true,
        trim: true,
    },
    phone: {
        type: String,
        trim: true,
    },
    address: {
        type: String,
        trim: true,
    },
    city: {
        type: String,
        trim: true,
    },
    state: {
        type: String,
        trim: true,
    },
    pincode: {
        type: String,
        trim: true,
    },
    otp: {
        type: String,
        trim: true,
    },
    isVerified: {
        type: Boolean,
        default: false,
    },
    verificationToken: {
        type: String,
        trim: true,
    },
    token: {
        type: String,
        trim: true,
    },
}, { timestamps: true });

const User = mongoose.model("User", UserSchema);
export default User;






/******************** adminlogin.jsx



/* eslint-disable react/no-unescaped-entities */
import { useState } from "react";
import "../../css/adminlogin.css";

export const AdminLogin = () => {
    // State to toggle between login and sign-up forms
    const [isSignUp, setIsSignUp] = useState(false);

    // Function to toggle form
    const toggleForm = () => {
        setIsSignUp(!isSignUp);
    };

    return (
        <div className="admin-body-container">
            <div className="admin-nav-container">
                <h1>Admin Panel</h1>
            </div>

            <div className="admin-login-container">
                <h1>{isSignUp ? "Sign Up" : "Login"}</h1>
                <form className="admin-login-form">
                    <input
                        className="admin-input"
                        type="text"
                        name="username"
                        autoComplete="off"
                        placeholder={isSignUp ? "Enter New Username" : "Username"}
                    />
                    <input
                        className="admin-input"
                        type={isSignUp ? "email" : "password"}
                        name="password"
                        autoComplete="off"
                        placeholder={isSignUp ? "Email" : "Password"}
                    />

                    {isSignUp && (
                        <input
                            className="admin-input"
                            type="password"
                            name="password"
                            autoComplete="off"
                            placeholder="Confirm Password"
                        />
                    )}

                    <button type="submit" className="admin-submit-btn">
                        {isSignUp ? "Sign Up" : "Login"}
                    </button>

                    {!isSignUp && (
                        <>
                            <p><a className="admin-forgot-password" href="#">Forgot Password?</a></p>
                            <p>
                                Don't have an account?{" "}
                                <a className="admin-signup-link" href="#" onClick={toggleForm}>
                                    Sign Up
                                </a>
                            </p>
                        </>
                    )}

                    {isSignUp && (
                        <p>
                            Already have an account?{" "}
                            <a className="admin-login-link" href="#" onClick={toggleForm}>
                                Login
                            </a>
                        </p>
                    )}
                </form>
            </div>
        </div>
    );
};









/* admin_dashboard.css */

/* Container for the entire dashboard */
.dashboard-body-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    margin: 0;
    padding: 0;
}

.dashboard-nav-container {
    height: 60px;
    width: 100%;
    background-color: #677787;
    color: white;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    font-family: 'Courier New', Courier, monospace;
    font-size: 30px;
    font-weight: 400;
    cursor: none;
}

.sidebar {
    height: 100%;
    width: 300px;
    background-color: #2f4050;
}

.sidebar-list {
    height: auto;
    padding: 0;
    width: 100%;
}

.sidebar-list .sidebar-row {
    height: 60px;
    width: 100%;
    list-style: none;
    margin: 0;
    display: flex;
    flex-direction: row;
    color: grey;
    justify-content: center;
    align-items: center;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif
}

.sidebar-row:hover {
    cursor: pointer;
    background-color: #293846;
    color: white;
}

#active {
    background-color: #293846;
    color: white;
}

.sidebar-row #sidebar-icon {
    flex: 30%;
    display: grid;
    place-items: center;
}

.sidebar-row #sidebar-title {
    flex: 70%;
}

.dashboard-main-container {
    display: flex;
    flex-grow: 1; /* Take remaining space below the nav */
    width: 100%;
}


/* Main content area */
.dashboard-container {
    flex-grow: 1; /* Take the remaining space next to the sidebar */
    background-color: #f4f4f4;
    padding: 20px;
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
}

/* Styling for the cards */
.card {
    width: 300px;
    height: 200px;
    background-color: white;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    padding: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
}